{"remainingRequest":"D:\\Vue_study\\pyac_project\\node_modules\\babel-loader\\lib\\index.js!D:\\Vue_study\\pyac_project\\src\\utils\\request.js","dependencies":[{"path":"D:\\Vue_study\\pyac_project\\src\\utils\\request.js","mtime":1619657708885},{"path":"D:\\Vue_study\\pyac_project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Vue_study\\pyac_project\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { Message, MessageBox } from 'element-ui';\nimport store from '@/store';\nimport { getToken } from '@/utils/auth'; // 1.创建axios实例\n\nvar service = axios.create({\n  // 公共接口--这里注意后面会讲,url = base url + request url\n  baseURL: process.env.VUE_APP_SERVER_URL,\n  // baseURL: 'https://api.example.com',\n  // 超时时间 单位是ms，这里设置了5s的超时时间\n  timeout: 5 * 1000\n}); // 2.请求拦截器request interceptor\n\nservice.interceptors.request.use(function (config) {\n  // 发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\n  // 注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\n  if (store.getters.token) {\n    // config.params = {'token': token}    // 如果要求携带在参数中\n    // config.headers.token = token;       // 如果要求携带在请求头中\n    // bearer：w3c规范\n    config.headers['Authorization'] = 'Bearer ' + getToken();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  // console.log(error) // for debug\n  return Promise.reject(error);\n}); // 设置cross跨域 并设置访问权限 允许跨域携带cookie信息,使用JWT可关闭\n\nservice.defaults.withCredentials = false;\nservice.interceptors.response.use( // 接收到响应数据并成功后的一些共有的处理，关闭loading等\nfunction (response) {\n  var res = response.data; // 如果自定义代码不是200，则将其判断为错误。\n\n  if (res.code !== 200) {\n    // 50008: 非法Token; 50012: 异地登录; 50014: Token失效;\n    if (res.code === 401 || res.code === 50012 || res.code === 50014) {\n      // 重新登录\n      MessageBox.confirm('会话失效，您可以留在当前页面，或重新登录', '权限不足', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n        center: true\n      }).then(function () {\n        window.location.href = '#/login';\n      });\n    } else {\n      // 其他异常直接提示\n      Message({\n        showClose: true,\n        message: '⚠' + res.message || 'Error',\n        type: 'error',\n        duration: 3 * 1000\n      });\n    }\n\n    return Promise.reject(new Error(res.message || 'Error'));\n  } else {\n    return res;\n  }\n}, function (error) {\n  /** *** 接收到异常响应的处理开始 *****/\n  // console.log('err' + error) // for debug\n  Message({\n    showClose: true,\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["D:/Vue_study/pyac_project/src/utils/request.js"],"names":["axios","Message","MessageBox","store","getToken","service","create","baseURL","process","env","VUE_APP_SERVER_URL","timeout","interceptors","request","use","config","getters","token","headers","error","Promise","reject","defaults","withCredentials","response","res","data","code","confirm","confirmButtonText","cancelButtonText","type","center","then","window","location","href","showClose","message","duration","Error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,YAApC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB,C,CAEA;;AACA,IAAMC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC3B;AACAC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBAFM;AAI3B;AACA;AACAC,EAAAA,OAAO,EAAE,IAAI;AANc,CAAb,CAAhB,C,CASA;;AACAN,OAAO,CAACO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACE,UAAAC,MAAM,EAAI;AACR;AACA;AACA,MAAIZ,KAAK,CAACa,OAAN,CAAcC,KAAlB,EAAyB;AACvB;AACA;AACA;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAe,eAAf,IAAkC,YAAYd,QAAQ,EAAtD;AACD;;AACD,SAAOW,MAAP;AACD,CAXH,EAYE,UAAAI,KAAK,EAAI;AACP;AACA;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAhBH,E,CAoBA;;AACAd,OAAO,CAACiB,QAAR,CAAiBC,eAAjB,GAAmC,KAAnC;AAEAlB,OAAO,CAACO,YAAR,CAAqBY,QAArB,CAA8BV,GAA9B,EACE;AACA,UAAAU,QAAQ,EAAI;AACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB,CADU,CAEV;;AACA,MAAID,GAAG,CAACE,IAAJ,KAAa,GAAjB,EAAsB;AACpB;AACA,QAAIF,GAAG,CAACE,IAAJ,KAAa,GAAb,IAAoBF,GAAG,CAACE,IAAJ,KAAa,KAAjC,IAA0CF,GAAG,CAACE,IAAJ,KAAa,KAA3D,EAAkE;AAChE;AACAzB,MAAAA,UAAU,CAAC0B,OAAX,CAAmB,sBAAnB,EAA2C,MAA3C,EAAmD;AACjDC,QAAAA,iBAAiB,EAAE,IAD8B;AAEjDC,QAAAA,gBAAgB,EAAE,IAF+B;AAGjDC,QAAAA,IAAI,EAAE,SAH2C;AAIjDC,QAAAA,MAAM,EAAE;AAJyC,OAAnD,EAKGC,IALH,CAKQ,YAAM;AACZC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACD,OAPD;AAQD,KAVD,MAUO;AAAE;AACPnC,MAAAA,OAAO,CAAC;AACNoC,QAAAA,SAAS,EAAE,IADL;AAENC,QAAAA,OAAO,EAAE,MAAMb,GAAG,CAACa,OAAV,IAAqB,OAFxB;AAGNP,QAAAA,IAAI,EAAE,OAHA;AAINQ,QAAAA,QAAQ,EAAE,IAAI;AAJR,OAAD,CAAP;AAMD;;AACD,WAAOnB,OAAO,CAACC,MAAR,CAAe,IAAImB,KAAJ,CAAUf,GAAG,CAACa,OAAJ,IAAe,OAAzB,CAAf,CAAP;AACD,GArBD,MAqBO;AACL,WAAOb,GAAP;AACD;AACF,CA7BH,EA8BE,UAAAN,KAAK,EAAI;AACP;AACA;AACAlB,EAAAA,OAAO,CAAC;AACNoC,IAAAA,SAAS,EAAE,IADL;AAENC,IAAAA,OAAO,EAAEnB,KAAK,CAACmB,OAFT;AAGNP,IAAAA,IAAI,EAAE,OAHA;AAINQ,IAAAA,QAAQ,EAAE,IAAI;AAJR,GAAD,CAAP;AAMA,SAAOnB,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAxCH;AA0CA,eAAed,OAAf","sourcesContent":["import axios from 'axios'\r\nimport { Message, MessageBox } from 'element-ui'\r\nimport store from '@/store'\r\nimport { getToken } from '@/utils/auth'\r\n\r\n// 1.创建axios实例\r\nconst service = axios.create({\r\n  // 公共接口--这里注意后面会讲,url = base url + request url\r\n  baseURL: process.env.VUE_APP_SERVER_URL,\r\n\r\n  // baseURL: 'https://api.example.com',\r\n  // 超时时间 单位是ms，这里设置了5s的超时时间\r\n  timeout: 5 * 1000\r\n})\r\n\r\n// 2.请求拦截器request interceptor\r\nservice.interceptors.request.use(\r\n  config => {\r\n    // 发请求前做的一些处理，数据转化，配置请求头，设置token,设置loading等，根据需求去添加\r\n    // 注意使用token的时候需要引入cookie方法或者用本地localStorage等方法，推荐js-cookie\r\n    if (store.getters.token) {\r\n      // config.params = {'token': token}    // 如果要求携带在参数中\r\n      // config.headers.token = token;       // 如果要求携带在请求头中\r\n      // bearer：w3c规范\r\n      config.headers['Authorization'] = 'Bearer ' + getToken()\r\n    }\r\n    return config\r\n  },\r\n  error => {\r\n    // do something with request error\r\n    // console.log(error) // for debug\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n\r\n// 设置cross跨域 并设置访问权限 允许跨域携带cookie信息,使用JWT可关闭\r\nservice.defaults.withCredentials = false\r\n\r\nservice.interceptors.response.use(\r\n  // 接收到响应数据并成功后的一些共有的处理，关闭loading等\r\n  response => {\r\n    const res = response.data\r\n    // 如果自定义代码不是200，则将其判断为错误。\r\n    if (res.code !== 200) {\r\n      // 50008: 非法Token; 50012: 异地登录; 50014: Token失效;\r\n      if (res.code === 401 || res.code === 50012 || res.code === 50014) {\r\n        // 重新登录\r\n        MessageBox.confirm('会话失效，您可以留在当前页面，或重新登录', '权限不足', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning',\r\n          center: true\r\n        }).then(() => {\r\n          window.location.href = '#/login'\r\n        })\r\n      } else { // 其他异常直接提示\r\n        Message({\r\n          showClose: true,\r\n          message: '⚠' + res.message || 'Error',\r\n          type: 'error',\r\n          duration: 3 * 1000\r\n        })\r\n      }\r\n      return Promise.reject(new Error(res.message || 'Error'))\r\n    } else {\r\n      return res\r\n    }\r\n  },\r\n  error => {\r\n    /** *** 接收到异常响应的处理开始 *****/\r\n    // console.log('err' + error) // for debug\r\n    Message({\r\n      showClose: true,\r\n      message: error.message,\r\n      type: 'error',\r\n      duration: 5 * 1000\r\n    })\r\n    return Promise.reject(error)\r\n  }\r\n)\r\nexport default service "]}]}