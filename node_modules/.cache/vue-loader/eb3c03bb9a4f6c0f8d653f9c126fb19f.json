{"remainingRequest":"D:\\Vue_study\\pyac_project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Vue_study\\pyac_project\\src\\views\\auth\\Register.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Vue_study\\pyac_project\\src\\views\\auth\\Register.vue","mtime":1619333046933},{"path":"D:\\Vue_study\\pyac_project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Vue_study\\pyac_project\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\Vue_study\\pyac_project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Vue_study\\pyac_project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { userRegister } from '@/api/auth/auth'\r\nexport default {\r\n  name: 'Register',\r\n  data() {\r\n    const validatePass = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请再次输入密码'))\r\n      } else if (value !== this.ruleForm.pass) {\r\n        callback(new Error('两次输入密码不一致!'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    return {\r\n      loading: false,\r\n      ruleForm: {\r\n        name: '',\r\n        pass: '',\r\n        checkPass: '',\r\n        email: ''\r\n      },\r\n      rules: {\r\n        name: [\r\n          { required: true, message: '请输入账号', trigger: 'blur' },\r\n          {\r\n            min: 2,\r\n            max: 10,\r\n            message: '长度在 2 到 10 个字符',\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        pass: [\r\n          { required: true, message: '请输入密码', trigger: 'blur' },\r\n          {\r\n            min: 6,\r\n            max: 20,\r\n            message: '长度在 6 到 20 个字符',\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        checkPass: [\r\n          { required: true, message: '请再次输入密码', trigger: 'blur' },\r\n          { validator: validatePass, trigger: 'blur' }\r\n        ],\r\n        email: [\r\n          { required: true, message: '请输入邮箱地址', trigger: 'blur' },\r\n          {\r\n            type: 'email',\r\n            message: '请输入正确的邮箱地址',\r\n            trigger: ['blur', 'change']\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          this.loading = true\r\n          userRegister(this.ruleForm)\r\n            .then((value) => {\r\n              const { code, message } = value\r\n              if (code === 200) {\r\n                this.$message({\r\n                  message: '账号注册成功',\r\n                  type: 'success'\r\n                })\r\n                setTimeout(() => {\r\n                  this.loading = false\r\n                  this.$router.push({ path: this.redirect || '/login' })\r\n                }, 0.1 * 1000)\r\n              } else {\r\n                this.$message.error('注册失败，' + message)\r\n              }\r\n            })\r\n            .catch(() => {\r\n              this.loading = false\r\n            })\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields()\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Register.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Register.vue","sourceRoot":"src/views/auth","sourcesContent":["<template>\r\n  <div class=\"columns py-6\">\r\n    <div class=\"column is-half is-offset-one-quarter\">\r\n      <el-card shadow=\"never\">\r\n        <div slot=\"header\" class=\"has-text-centered has-text-weight-bold\">\r\n          新用户入驻\r\n        </div>\r\n        <div>\r\n          <el-form\r\n            ref=\"ruleForm\"\r\n            v-loading=\"loading\"\r\n            :model=\"ruleForm\"\r\n            status-icon\r\n            :rules=\"rules\"\r\n            label-width=\"100px\"\r\n            class=\"demo-ruleForm\"\r\n          >\r\n            <el-form-item label=\"账号\" prop=\"name\">\r\n              <el-input v-model=\"ruleForm.name\" />\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"密码\" prop=\"pass\">\r\n              <el-input\r\n                v-model=\"ruleForm.pass\"\r\n                type=\"password\"\r\n                autocomplete=\"off\"\r\n              />\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"确认密码\" prop=\"checkPass\">\r\n              <el-input\r\n                v-model=\"ruleForm.checkPass\"\r\n                type=\"password\"\r\n                autocomplete=\"off\"\r\n              />\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"邮箱\" prop=\"email\">\r\n              <el-input v-model=\"ruleForm.email\" autocomplete=\"off\" />\r\n            </el-form-item>\r\n\r\n            <el-form-item>\r\n              <el-button\r\n                type=\"primary\"\r\n                @click=\"submitForm('ruleForm')\"\r\n              >立即注册</el-button>\r\n              <el-button @click=\"resetForm('ruleForm')\">重置</el-button>\r\n            </el-form-item>\r\n          </el-form>\r\n        </div>\r\n      </el-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { userRegister } from '@/api/auth/auth'\r\nexport default {\r\n  name: 'Register',\r\n  data() {\r\n    const validatePass = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('请再次输入密码'))\r\n      } else if (value !== this.ruleForm.pass) {\r\n        callback(new Error('两次输入密码不一致!'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n    return {\r\n      loading: false,\r\n      ruleForm: {\r\n        name: '',\r\n        pass: '',\r\n        checkPass: '',\r\n        email: ''\r\n      },\r\n      rules: {\r\n        name: [\r\n          { required: true, message: '请输入账号', trigger: 'blur' },\r\n          {\r\n            min: 2,\r\n            max: 10,\r\n            message: '长度在 2 到 10 个字符',\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        pass: [\r\n          { required: true, message: '请输入密码', trigger: 'blur' },\r\n          {\r\n            min: 6,\r\n            max: 20,\r\n            message: '长度在 6 到 20 个字符',\r\n            trigger: 'blur'\r\n          }\r\n        ],\r\n        checkPass: [\r\n          { required: true, message: '请再次输入密码', trigger: 'blur' },\r\n          { validator: validatePass, trigger: 'blur' }\r\n        ],\r\n        email: [\r\n          { required: true, message: '请输入邮箱地址', trigger: 'blur' },\r\n          {\r\n            type: 'email',\r\n            message: '请输入正确的邮箱地址',\r\n            trigger: ['blur', 'change']\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    submitForm(formName) {\r\n      this.$refs[formName].validate((valid) => {\r\n        if (valid) {\r\n          this.loading = true\r\n          userRegister(this.ruleForm)\r\n            .then((value) => {\r\n              const { code, message } = value\r\n              if (code === 200) {\r\n                this.$message({\r\n                  message: '账号注册成功',\r\n                  type: 'success'\r\n                })\r\n                setTimeout(() => {\r\n                  this.loading = false\r\n                  this.$router.push({ path: this.redirect || '/login' })\r\n                }, 0.1 * 1000)\r\n              } else {\r\n                this.$message.error('注册失败，' + message)\r\n              }\r\n            })\r\n            .catch(() => {\r\n              this.loading = false\r\n            })\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    resetForm(formName) {\r\n      this.$refs[formName].resetFields()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style> "]}]}